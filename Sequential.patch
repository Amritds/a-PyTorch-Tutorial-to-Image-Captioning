--- /scratch/scratch5/adsue/envs/adsue2/lib/python3.5/site-packages/torch/nn/modules/container.py
+++ /scratch/scratch5/adsue/envs/adsue2/lib/python3.5/site-packages/torch/nn/modules/container.py
@@ -1,9 +1,9 @@
 class Sequential(Module):
-    """A sequential container.
+    r"""A sequential container.
     Modules will be added to it in the order they are passed in the constructor.
     Alternatively, an ordered dict of modules can also be passed in.
 
-    To make it easier to understand, given is a small example::
+    To make it easier to understand, here is a small example::
 
         # Example of using Sequential
         model = nn.Sequential(
@@ -28,18 +28,43 @@
             for key, module in args[0].items():
                 self.add_module(key, module)
         else:
-            idx = 0
-            for module in args:
+            for idx, module in enumerate(args):
                 self.add_module(str(idx), module)
-                idx += 1
+
+    def _get_item_by_idx(self, iterator, idx):
+        """Get the idx-th item of the iterator"""
+        size = len(self)
+        idx = operator.index(idx)
+        if not -size <= idx < size:
+            raise IndexError('index {} is out of range'.format(idx))
+        idx %= size
+        return next(islice(iterator, idx, None))
 
     def __getitem__(self, idx):
-        if idx < 0 or idx >= len(self._modules):
-            raise IndexError('index {} is out of range'.format(idx))
-        it = iter(self._modules.values())
-        for i in range(idx):
-            next(it)
-        return next(it)
+        if isinstance(idx, slice):
+            return Sequential(OrderedDict(list(self._modules.items())[idx]))
+        else:
+            return self._get_item_by_idx(self._modules.values(), idx)
+
+    def __setitem__(self, idx, module):
+        key = self._get_item_by_idx(self._modules.keys(), idx)
+        return setattr(self, key, module)
+
+    def __delitem__(self, idx):
+        if isinstance(idx, slice):
+            for key in list(self._modules.keys())[idx]:
+                delattr(self, key)
+        else:
+            key = self._get_item_by_idx(self._modules.keys(), idx)
+            delattr(self, key)
+
+    def __len__(self):
+        return len(self._modules)
+
+    def __dir__(self):
+        keys = super(Sequential, self).__dir__()
+        keys = [key for key in keys if not key.isdigit()]
+        return keys
 
     def forward(self, input):
         for module in self._modules.values():